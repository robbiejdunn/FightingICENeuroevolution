import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;

import java.util.Arrays;
import java.util.Random;

/**
 * NeuralNet
 *
 * An artificial neural network using the deeplearning4j java library. Used by class Controller. Network consists of
 * 6 inputs nodes, 20 hidden layer and 7 output. Provides methods to initialise the network and feed through the
 * network with inputs of game frame data.
 *
 * Created by Robbie on 05/03/2017.
 */
public class NeuralNetwork {

    MultiLayerNetwork net;                  // Neural network: used in feed method
    double[] weights;                       // Store weights for network in readable array form

    public NeuralNetwork( ) {
        init();
    }

    private void init() {
        int numInputs = 3;      // 6 inputs from frame data
        int numHidden = 20;     // number of nodes in the hidden layer of the network
        int numOutputs = 7;     // 7 possible outputs for agent
        Random r = new Random();
        /* configuration for the neural net */
        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
                .list()
                .layer(0, new DenseLayer.Builder()          // layer 0: input->hidden
                        .nIn(numInputs)
                        .nOut(numHidden)
                        .activation(Activation.TANH)
                        .build())
                .layer(1, new OutputLayer.Builder()          // layer 1: hidden->output
                        .activation(Activation.TANH)
                        .nIn(numHidden)
                        .nOut(numOutputs)
                        .build())
                .backprop(false).pretrain(false).build();

        /* initialising neural net */
        net = new MultiLayerNetwork(conf);
        net.init();
        System.out.println("Num params: " + net.numParams());
        System.out.println("Network initialised: "+numInputs+" input nodes, "+numHidden+" hidden and "
            +numOutputs+" output.");
        /* store weights in readable form for other classes */
//        weights = new double[net.params().length()];
//        for (int i=0; i < net.params().length(); i++) {
//            weights[i] = net.params().getDouble(i);
//
//        }


    }




    protected double[] feed(int X, int Y, int energy) {
        double[] output;
        /* normalises and scales inputs accordingly */
        double xNorm = (((double) (X + 800) / (double) 1600) * 2) - 1;
        double yNorm = (((double) (Y + 465) / (double) 930) * 2) - 1;
        double energyNorm = (((double) energy / (double) 1000) * 2) - 1;            // energy range 0/1000
        
//        System.out.println("Network feed:\tmy x="+myXNorm+",my y="+myYNorm+",enemy x="+enemyXNorm
//            +",enemy y="+enemyYNorm+",my energy="+energyNorm);

        double[] vectorDoubles = new double[]{xNorm, yNorm, energyNorm};
        INDArray ia = Nd4j.create(vectorDoubles);
//        System.out.println(net.params());
        output = new double[7];
        INDArray fed = net.feedForward(ia).get(2);
        for (int i = 0; i < output.length; i++) {
            output[i] = fed.getDouble(i);
        }
        return output;
    }

    /* generate the initial sets of */
    protected void updateWeights(double[] w) {
        if (w.length != 227) {
            return;
        }
        System.out.println("Updating weights");
        weights = w;
//        System.out.println(net.params() + "\n" + net.params().length() + "\n");
        INDArray uw = Nd4j.create(w);       // updated weights for the network generated by EA
        net.setParams(uw);
//        System.out.println(net.params() + "\n" + net.params().length() + "\n");
    }

    protected double[] getWeights() {
        return weights;
    }

    public static void main(String[] args) {

        NeuralNetwork n = new NeuralNetwork();
        System.out.println("Init");
        System.out.println(n.getWeights());
        double[] t = new double[200];
        Arrays.fill(t, 0);
        n.updateWeights(t);
        System.out.println(n.getWeights().toString());
    }

}
